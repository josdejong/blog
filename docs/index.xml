<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jos de Jong</title>
    <link>https://josdejong.com/</link>
    <description>Recent content on Jos de Jong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2013-2020 &lt;a href=&#39;https://josdejong.com&#39;&gt;Jos de Jong&lt;/a&gt; &amp;bull; powered by &lt;a href=&#39;https://gohugo.io/&#39;&gt;Hugo&lt;/a&gt; and &lt;a href=&#39;https://pages.github.com/&#39;&gt;GitHub pages&lt;/a&gt; &amp;bull; background from &lt;a href=&#39;https://www.technobuffalo.com/sites/technobuffalo.com/files/wp/2010/11/tb-wallpaper-blue-2560x1440.jpg&#39;&gt;technobuffalo&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 17 Jun 2020 01:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josdejong.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to keep your code simple and maintainable</title>
      <link>https://josdejong.com/posts/2020-06-17-how-to-keep-your-code-simple-and-maintainable/</link>
      <pubDate>Wed, 17 Jun 2020 01:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/posts/2020-06-17-how-to-keep-your-code-simple-and-maintainable/</guid>
      <description>When developing a new application, your code base starts small and simple. Over time, your code grows and becomes more complex. It can be hard to fight complexity and keep a code base maintainable in the long run. Here some principles that help me with that.
Recon with the cost of maintaining code, not just the cost of development When buying a car, it&amp;rsquo;s quite easy to reckon with both the cost of the one-time purchase as well as ongoing costs like fuel, taxes, and maintenance.</description>
    </item>
    
    <item>
      <title>Blog migrated</title>
      <link>https://josdejong.com/posts/2020-06-17-blog-migrated/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/posts/2020-06-17-blog-migrated/</guid>
      <description>I&amp;rsquo;ve moved this blog from octopress to hugo, since octopress isn&amp;rsquo;t maintained anymore. I&amp;rsquo;ve tried to keep the urls of all pages backward compatible. Thanks again octopress!</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://josdejong.com/about/</link>
      <pubDate>Sun, 14 Jun 2020 11:24:48 +0200</pubDate>
      
      <guid>https://josdejong.com/about/</guid>
      <description>I&amp;rsquo;m Jos de Jong, living and working in Rotterdam, the Netherlands. I&amp;rsquo;m happily married with the nicest girl in the world, and we have a lovely little girl and a boy to take care of. I believe God created this marvelous world where we can live, love, discover, and develop.
I&amp;rsquo;ve studied at Delft University of Technology, and have a Bachelor Mechanical Engineering, and a Master Systems and Control. After my study I&amp;rsquo;ve worked in ICT and production automation at Quooker.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://josdejong.com/projects/</link>
      <pubDate>Sun, 14 Jun 2020 11:24:32 +0200</pubDate>
      
      <guid>https://josdejong.com/projects/</guid>
      <description>This page gives an overview on the projects I&amp;rsquo;m working on. These include projects I work on at work as well as in my spare time.
math.js Math.js is an extensive math library for JavaScript and Node.js. It features a flexible expression parser and offers an integrated solution to work with real and complex numbers, units, and matrices. Powerful and easy to use.
Website: https://mathjs.org

Math Notepad Math Notepad is a web based editor for mathematical calculations.</description>
    </item>
    
    <item>
      <title>mathjs v6: a monolith turned modular</title>
      <link>https://josdejong.com/blog/2019/06/08/mathjs-v6-a-monolith-turned-modular/</link>
      <pubDate>Sat, 08 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2019/06/08/mathjs-v6-a-monolith-turned-modular/</guid>
      <description>In this article, I share with you the journey and the struggles of turning a large, monolithic JavaScript mathematics library, mathjs, into a modular one embracing ES6 modules and functional programming. Because of the heavily intertwined nature of the functionality this was a huge and unique challenge.
Why? Math.js is a popular JavaScript library that brings advanced mathematics to the web browser and server. The unique value of math.js lies in offering an integrated solution to work with different types of data like complex numbers and matrices, and offering a math-friendly syntax that allows expressing mathematics in a readable, intuitive way.</description>
    </item>
    
    <item>
      <title>Batteries included</title>
      <link>https://josdejong.com/blog/2016/08/24/batteries-included/</link>
      <pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2016/08/24/batteries-included/</guid>
      <description>tl;dr The JavaScript community is doing a great job in creating an ecosystem of highly composable, configurable, and extensible components. Unfortunately, this has complicated usage of these components. It is time to focus on the user again. Deliver components with a good default configuration which matches the typical use cases, and ensure a gradual learning curve for more advanced usage of a component.
Latest years I see a trend in software libraries and frameworks that make me really happy: libraries have become more and more composable.</description>
    </item>
    
    <item>
      <title>Static typing: the good parts</title>
      <link>https://josdejong.com/blog/2016/06/05/static-typing-the-good-parts/</link>
      <pubDate>Sun, 05 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2016/06/05/static-typing-the-good-parts/</guid>
      <description>tl;dr So far I&amp;rsquo;ve been hesitant to embrace static type checkers like TypeScript. It&amp;rsquo;s because I associated static type checking with the restrictions and interoperability issues that I know from Java and C++. However, it turns out that TypeScript is different: it uses a structural type system rather than a nominal one, which eliminates these downsides. It gives us a way to describe data types without sacrificing flexibility, interoperability, or scalability.</description>
    </item>
    
    <item>
      <title>Architectural changes in math.js v2</title>
      <link>https://josdejong.com/blog/2015/08/08/architectural-changes-in-mathjs-v2/</link>
      <pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2015/08/08/architectural-changes-in-mathjs-v2/</guid>
      <description>tl;dr Math.js v2 has been released a week ago. It has a completely reworked, modular architecture which allows creating custom builds. All functions have been rewritten into typed-functions. This takes away a lot of overhead for type checking and type conversions. These changes create a lot of flexibility in both extending and consuming the library.
A week ago math.js v2 has been released, a big milestone! You can download it here.</description>
    </item>
    
    <item>
      <title>A broader view on isomorphic JavaScript</title>
      <link>https://josdejong.com/blog/2015/03/28/a-broader-view-on-isomorphic-javascript/</link>
      <pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2015/03/28/a-broader-view-on-isomorphic-javascript/</guid>
      <description>tl;dr In order to ease full stack JavaScript development, we need to take away the hurdles keeping these worlds separated. We need unified, isomorphic solutions for common functionality like module loading, networking, background processes, logging, and others.
Ever had to use statements like the following?
if (typeof window !== &amp;#39;undefined&amp;#39;) { // browser } else { // node.js } It&amp;rsquo;s a simple check to see whether a script is being executed in in a browser, and if not, assume that it&amp;rsquo;s a node.</description>
    </item>
    
    <item>
      <title>Reusable software? Just don&#39;t write generic code</title>
      <link>https://josdejong.com/blog/2015/01/06/code-reuse/</link>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2015/01/06/code-reuse/</guid>
      <description>It may be the holy grail of programming: writing reusable code. Not getting stuck by inventing the wheel again and again, but moving forward and building on top of what has been done. Looking at what we do today, we still haven&amp;rsquo;t really figured this out.
So you are writing a software library. You had a great idea for a simple, broadly applicable solution. You have cooked up a nice API and are happy with the result.</description>
    </item>
    
    <item>
      <title>The art of creating simple but flexible APIs</title>
      <link>https://josdejong.com/blog/2014/10/18/the-art-of-creating-simple-but-flexible-apis/</link>
      <pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2014/10/18/the-art-of-creating-simple-but-flexible-apis/</guid>
      <description>A while ago I read the blog post Ranging Near and Far by Scott Sauyet. On Echo JS, Scott titled a link to this blog &amp;ldquo;Choosing simple APIs over flexible ones&amp;rdquo;. This title suggests that you have to choose between either simple or flexible APIs, which is a false dilemma. This got me thinking: What makes a good API?
Flexibility Scott discusses the API of the range function of Ramda compared to that of Underscore.</description>
    </item>
    
    <item>
      <title>Shaped by the language you use</title>
      <link>https://josdejong.com/blog/2014/01/13/shaped-by-the-language-you-use/</link>
      <pubDate>Mon, 13 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2014/01/13/shaped-by-the-language-you-use/</guid>
      <description>A few months ago I did an astonishing discovery, namely how strong your solutions are shaped by the programming language you use, the language that lives in your head. The interesting thing is that I already knew this. But despite that, I hadn&amp;rsquo;t expected this to be so incredibly influencing until I saw such a clear case of this in my own work.
The right tool for the right job First a short explanation of my programming background.</description>
    </item>
    
    <item>
      <title>Multithreading is today&#39;s GOTO</title>
      <link>https://josdejong.com/blog/2013/09/18/multithreading-is-todays-goto/</link>
      <pubDate>Wed, 18 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2013/09/18/multithreading-is-todays-goto/</guid>
      <description>Ask any programmer to the worst bug he ever encountered and you will very likely hear a terrible story concerning multithreading and data locks. Or maybe an issue around memory corruption or memory leakage. Two topics which are apparently hard to master for us programmers.
The latter case, memory corruption, is becoming less and less of a problem, as most modern languages come with automatic memory management. Most people see this as a step forward: it saves us a lot of trouble and results in more robust applications.</description>
    </item>
    
    <item>
      <title>Details matter</title>
      <link>https://josdejong.com/blog/2013/07/27/details-matter/</link>
      <pubDate>Sat, 27 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2013/07/27/details-matter/</guid>
      <description>This is a theme which pops up again and again at the software projects I am working on. I really liked this blog by Jeff Atwood in this regard, explaining all your app is, is a collection of tiny details. Software which has not taken care of details right can be extremely annoying, and vice versa, an application having its details right can be real joy to work with.
This article explains the importance of paying attention to details in application development.</description>
    </item>
    
    <item>
      <title>Welcome!</title>
      <link>https://josdejong.com/blog/2013/07/19/welcome/</link>
      <pubDate>Fri, 19 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2013/07/19/welcome/</guid>
      <description>Welcome at my blog. I just installed it freshly using octopress. Like everybody, I&amp;rsquo;m very unique and have the world a lot of interesting things to tell ;-). So here we go.</description>
    </item>
    
  </channel>
</rss>