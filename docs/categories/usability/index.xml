<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>usability on Jos de Jong</title>
    <link>https://josdejong.com/categories/usability/</link>
    <description>Recent content in usability on Jos de Jong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; 2013-2022 &lt;a href=&#39;https://josdejong.com&#39;&gt;Jos de Jong&lt;/a&gt; &amp;bull; powered by &lt;a href=&#39;https://gohugo.io/&#39;&gt;Hugo&lt;/a&gt; and &lt;a href=&#39;https://pages.github.com/&#39;&gt;GitHub pages&lt;/a&gt; &amp;bull; background from &lt;a href=&#39;https://www.technobuffalo.com/sites/technobuffalo.com/files/wp/2010/11/tb-wallpaper-blue-2560x1440.jpg&#39;&gt;technobuffalo&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 24 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://josdejong.com/categories/usability/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Batteries included</title>
      <link>https://josdejong.com/blog/2016/08/24/batteries-included/</link>
      <pubDate>Wed, 24 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://josdejong.com/blog/2016/08/24/batteries-included/</guid>
      <description>tl;dr The JavaScript community is doing a great job in creating an ecosystem of highly composable, configurable, and extensible components. Unfortunately, this has complicated usage of these components. It is time to focus on the user again. Deliver components with a good default configuration which matches the typical use cases, and ensure a gradual learning curve for more advanced usage of a component.
Latest years I see a trend in software libraries and frameworks that make me really happy: libraries have become more and more composable.</description>
    </item>
    
  </channel>
</rss>